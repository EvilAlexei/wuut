//gradient
.gradient(@type; @colors; @dir: 0deg; @prefixes: webkit, moz, ms, o; @index: length(@prefixes)) when (@index > 0) {
    .gradient(@type; @colors; @dir; @prefixes; (@index - 1));

    @prefix  : extract(@prefixes, @index);
    @dir-old : 90 - (@dir);

    background-image: ~"-@{prefix}-@{type}-gradient(@{dir-old}, @{colors})";
  & when ( @index = length(@prefixes) ) {
        background-image: ~"@{type}-gradient(@{dir}, @{colors})";
    }
}
//box-sizing
.box-sizing(@sizing) {
  -webkit-box-sizing: @sizing;
  -moz-box-sizing: @sizing;
  box-sizing: @sizing;
}

.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow;
  box-shadow: @shadow;
}

//user-select
.user-select(@select) {
  -webkit-touch-callout: @select;
  -webkit-user-select: @select;
  -khtml-user-select: @select;
  -moz-user-select: @select;
  -ms-user-select: @select;
  user-select: @select;
}

.transition (@transition) {
  -webkit-transition: @transition;
  -moz-transition: @transition;
  -o-transition: @transition;
  transition: @transition;
}

.transform (@transform) {
    -moz-transform: @transform;
    -webkit-transform: @transform;
    -o-transform: @transform;
    transform: @transform;
}

.opacity(@opacity: 0.5) {
  opacity: @opacity;
  @opperc: @opacity * 100;
  filter: ~"alpha(opacity=@{opperc})";
}

//clear-fix
.clear-fix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
//after-before clear-fix
.pseudo-element-clear-fix() {
    content: '';
    clear: both;
    display: block;
}